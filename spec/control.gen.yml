# GENERATED FILE DO NOT EDIT
openapi: 3.0.2
info:
  description: API for the SCION Control Service
  title: Control Service API
  version: 0.0.1
servers:
  - url: 'http://{host}:{port}'
    variables:
      host:
        default: localhost
      port:
        default: '30452'
tags:
  - name: segment
    description: Everything related to SCION path segments.
  - name: common
    description: Common API exposed by SCION services.
  - name: crypto
    description: API related to SCION cryptography.
paths:
  /segments:
    get:
      tags:
        - segment
      summary: List the SCION path segments
      description: >-
        List the SCION path segments that are known to the control service. The
        results can be filtered by the start and end AS of the segment. Inspect
        the individual segments for a more detailed view.
      operationId: get-segments
      parameters:
        - in: query
          description: Start ISD-AS of segment.
          name: start_isd_as
          example: '1-ff00:0:110'
          schema:
            $ref: '#/components/schemas/IsdAs'
        - in: query
          description: Terminal AS of segment.
          name: end_isd_as
          example: '2-ff00:0:210'
          schema:
            $ref: '#/components/schemas/IsdAs'
      responses:
        '200':
          description: List of matching SCION path segments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SegmentBrief'
        '400':
          description: Invalid request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /signer:
    get:
      tags:
        - crypto
      summary: >-
        Prints information about the AS Certificate used to sign the
        control-plane message.
      operationId: get-signer
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signer'
        '400':
          $ref: '#/components/responses/BadRequest'
  /ca:
    get:
      tags:
        - crypto
      summary: Information about the CA.
      operationId: get-ca
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CA'
        '400':
          $ref: '#/components/responses/BadRequest'
  /info:
    get:
      tags:
        - common
      summary: Basic information page about the control service process.
      operationId: get-info
      responses:
        '200':
          description: Successful Operation
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /log/level:
    get:
      tags:
        - common
      summary: Get logging level
      operationId: get-log-level
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogLevel'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      tags:
        - common
      summary: Set logging level
      operationId: set-log-level
      requestBody:
        description: Logging Level
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogLevel'
        required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogLevel'
        '400':
          $ref: '#/components/responses/BadRequest'
  /config:
    get:
      tags:
        - common
      summary: Prints the TOML configuration file.
      operationId: get-config
      responses:
        '200':
          description: Successful Operation
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
  /topology:
    get:
      tags:
        - common
      summary: Prints the contents of the AS topology file.
      operationId: get-topology
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  schemas:
    IsdAs:
      title: ISD-AS Identifier
      type: string
      pattern: '^\d+-([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$'
      example: '1-ff00:0:110'
    SegmentID:
      title: Segment Identifier
      type: string
      example: fb45d44d
      format: hex-string
    SegmentBrief:
      title: Brief SCION path segment description
      type: object
      required:
        - id
        - start_isd_as
        - end_isd_as
        - length
      properties:
        id:
          $ref: '#/components/schemas/SegmentID'
        start_isd_as:
          description: Start ISD-AS of the segment.
          $ref: '#/components/schemas/IsdAs'
        end_isd_as:
          description: End ISD-AS of the segment.
          $ref: '#/components/schemas/IsdAs'
        length:
          description: Length of the segment.
          type: integer
          example: 1
    Problem:
      type: object
      required:
        - status
        - title
      properties:
        type:
          type: string
          format: uri-reference
          description: >-
            A URI reference that uniquely identifies the problem type only in
            the context of the provided API. Opposed to the specification in
            RFC-7807, it is neither recommended to be dereferencable and point
            to a human-readable documentation nor globally unique for the
            problem type.
          default: 'about:blank'
          example: /problem/connection-error
        title:
          type: string
          description: >-
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually
            not suited for non technical stakeholders and not localized.
          example: Connection to database timed out
        instance:
          type: string
          format: uri-reference
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem, e.g. by adding a fragment identifier or sub-path to the
            problem type. May be used to locate the root of this problem in the
            source code.
          example: /problem/connection-error#token-info-read-timed-out
    Signer:
      type: object
      properties:
        subject:
          type: object
          properties:
            isd_as:
              type: string
              example: '1-ff00:0:110'
        subject_key_id:
          type: string
          example: E0 EA 2C BC AF 1C E5 BF A7 D0 17 BD 93 85 36 08 28 DE FA E2
        expiration:
          type: string
          format: date-time
          example: 2022-01-04T09:59:33.000Z
        trc_id:
          type: object
          properties:
            isd:
              type: number
              example: 1
            base_number:
              type: number
              example: 1
            serial_number:
              type: number
              example: 1
        cert_validity:
          type: object
          properties:
            not_before:
              type: string
              format: date-time
              example: 2021-01-04T09:59:33.000Z
            not_after:
              type: string
              format: date-time
              example: 2022-01-04T09:59:33.000Z
        in_grace_period:
          type: boolean
          example: false
    StandardError:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
    CA:
      type: object
      properties:
        subject:
          type: object
          properties:
            isd_as:
              type: string
              example: '1-ff00:0:110'
        subject_key_id:
          type: string
          example: 5D A1 F7 17 F0 C1 35 0C 88 25 FA 61 D3 1D FE 91 8E F5 0F 7C
        policy:
          type: object
          properties:
            chain_lifetime:
              type: string
              example: 72h0m0s
        cert_validity:
          type: object
          properties:
            not_before:
              type: string
              format: date-time
              example: 2021-01-04T09:59:33.000Z
            not_after:
              type: string
              format: date-time
              example: 2023-01-04T09:59:33.000Z
    LogLevel:
      type: object
      properties:
        level:
          type: string
          example: info
          description: Logging level
          enum:
            - debug
            - info
            - error
      required:
        - level
    Topology:
      type: object
      additionalProperties: true
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardError'
